{"ast":null,"code":"function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Platform } from '@unimodules/core';\nimport path from 'path-browserify';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport URL from 'url-parse';\nimport AssetSourceResolver from \"./AssetSourceResolver\";\nimport { manifestBaseUrl, getManifest } from \"./PlatformUtils\";\nconst assetMapOverride = getManifest().assetMapOverride;\nexport function selectAssetSource(meta) {\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = _objectSpread({}, meta, assetMapOverride[meta.hash]);\n  }\n\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex(s => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n\n  if (uri) {\n    return {\n      uri: resolveUri(uri),\n      hash\n    };\n  }\n\n  const assetUrlOverride = getManifest().assetUrlOverride;\n\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return {\n      uri: resolveUri(uri),\n      hash\n    };\n  }\n\n  const fileScale = scale === 1 ? '' : \"@\".concat(scale, \"x\");\n  const fileExtension = meta.type ? \".\".concat(encodeURIComponent(meta.type)) : '';\n  const suffix = \"/\".concat(encodeURIComponent(meta.name)).concat(fileScale).concat(fileExtension, \"?platform=\").concat(encodeURIComponent(Platform.OS), \"&hash=\").concat(encodeURIComponent(meta.hash));\n\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return {\n      uri,\n      hash\n    };\n  }\n\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return {\n      uri: baseUrl.href,\n      hash\n    };\n  }\n\n  return {\n    uri: \"https://d1wp6m56sqw74a.cloudfront.net/~assets/\".concat(encodeURIComponent(hash)),\n    hash\n  };\n}\nexport function resolveUri(uri) {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const {\n    protocol\n  } = new URL(uri);\n\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}","map":{"version":3,"sources":["../src/AssetSources.ts"],"names":[],"mappings":";;;;AAAA,SAAS,QAAT,QAAyB,kBAAzB;AACA,OAAO,IAAP,MAAiB,iBAAjB;;AAEA,OAAO,GAAP,MAAgB,WAAhB;AACA,OAAO,mBAAP;AAEA,SAAS,eAAT,EAA0B,WAA1B;AAqBA,MAAM,gBAAgB,GAAG,WAAW,GAAG,gBAAvC;AAQA,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAA+C;AAEnD,MAAI,gBAAgB,IAAI,gBAAgB,CAAC,cAAjB,CAAgC,IAAI,CAAC,IAArC,CAAxB,EAAoE;AAClE,IAAA,IAAI,qBAAQ,IAAR,EAAiB,gBAAgB,CAAC,IAAI,CAAC,IAAN,CAAjC,CAAJ;AACD;;AAID,QAAM,KAAK,GAAG,mBAAmB,CAAC,SAApB,CAA8B,IAAI,CAAC,MAAnC,EAA2C,UAAU,CAAC,GAAX,EAA3C,CAAd;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,MAAL,CAAY,SAAZ,CAAsB,CAAC,IAAI,CAAC,KAAK,KAAjC,CAAd;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,UAAL,GAAkB,IAAI,CAAC,UAAL,CAAgB,KAAhB,KAA0B,IAAI,CAAC,UAAL,CAAgB,CAAhB,CAA5C,GAAiE,IAAI,CAAC,IAAnF;AAGA,QAAM,GAAG,GAAG,IAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,QAAL,CAAc,KAAd,KAAwB,IAAI,CAAC,QAAL,CAAc,CAAd,CAAxC,GAA2D,IAAI,CAAC,GAA5E;;AACA,MAAI,GAAJ,EAAS;AACP,WAAO;AAAE,MAAA,GAAG,EAAE,UAAU,CAAC,GAAD,CAAjB;AAAwB,MAAA;AAAxB,KAAP;AACD;;AAGD,QAAM,gBAAgB,GAAG,WAAW,GAAG,gBAAvC;;AACA,MAAI,gBAAJ,EAAsB;AACpB,UAAM,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,gBAAV,EAA4B,IAA5B,CAAZ;AACA,WAAO;AAAE,MAAA,GAAG,EAAE,UAAU,CAAC,GAAD,CAAjB;AAAwB,MAAA;AAAxB,KAAP;AACD;;AAED,QAAM,SAAS,GAAG,KAAK,KAAK,CAAV,GAAc,EAAd,cAAuB,KAAvB,MAAlB;AACA,QAAM,aAAa,GAAG,IAAI,CAAC,IAAL,cAAgB,kBAAkB,CAAC,IAAI,CAAC,IAAN,CAAlC,IAAkD,EAAxE;AACA,QAAM,MAAM,cAAO,kBAAkB,CACnC,IAAI,CAAC,IAD8B,CAAzB,SAER,SAFQ,SAEI,aAFJ,uBAE8B,kBAAkB,CAC1D,QAAQ,CAAC,EADiD,CAFhD,mBAIF,kBAAkB,CAAC,IAAI,CAAC,IAAN,CAJhB,CAAZ;;AAQA,MAAI,eAAe,IAAf,CAAoB,IAAI,CAAC,kBAAzB,CAAJ,EAAkD;AAChD,UAAM,GAAG,GAAG,IAAI,CAAC,kBAAL,GAA0B,MAAtC;AACA,WAAO;AAAE,MAAA,GAAF;AAAO,MAAA;AAAP,KAAP;AACD;;AAGD,MAAI,WAAW,GAAG,SAAlB,EAA6B;AAC3B,UAAM,OAAO,GAAG,IAAI,GAAJ,CAAQ,WAAW,GAAG,SAAtB,CAAhB;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,IAAI,CAAC,kBAAL,GAA0B,MAAlD;AACA,WAAO;AAAE,MAAA,GAAG,EAAE,OAAO,CAAC,IAAf;AAAqB,MAAA;AAArB,KAAP;AACD;;AAGD,SAAO;AACL,IAAA,GAAG,0DAAmD,kBAAkB,CAAC,IAAD,CAArE,CADE;AAEL,IAAA;AAFK,GAAP;AAID;AAOD,OAAM,SAAU,UAAV,CAAqB,GAArB,EAAgC;AACpC,MAAI,CAAC,eAAL,EAAsB;AACpB,WAAO,GAAP;AACD;;AAED,QAAM;AAAE,IAAA;AAAF,MAAe,IAAI,GAAJ,CAAQ,GAAR,CAArB;;AACA,MAAI,QAAQ,KAAK,EAAjB,EAAqB;AACnB,WAAO,GAAP;AACD;;AAED,QAAM,OAAO,GAAG,IAAI,GAAJ,CAAQ,eAAR,CAAhB;AACA,QAAM,YAAY,GAAG,GAAG,CAAC,UAAJ,CAAe,GAAf,IAAsB,GAAtB,GAA4B,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,QAAlB,EAA4B,GAA5B,CAAjD;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,YAAxB;AACA,SAAO,OAAO,CAAC,IAAf;AACD","sourcesContent":["import { Platform } from '@unimodules/core';\nimport path from 'path-browserify';\nimport { PixelRatio } from 'react-native';\nimport URL from 'url-parse';\nimport AssetSourceResolver from './AssetSourceResolver';\n\nimport { manifestBaseUrl, getManifest } from './PlatformUtils';\n\nexport type AssetMetadata = {\n  hash: string;\n  name: string;\n  type: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  httpServerLocation: string;\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex(s => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(\n    meta.name\n  )}${fileScale}${fileExtension}?platform=${encodeURIComponent(\n    Platform.OS\n  )}&hash=${encodeURIComponent(meta.hash)}`;\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return { uri, hash };\n  }\n\n  // For assets during development, we use the development server's URL origin\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return { uri: baseUrl.href, hash };\n  }\n\n  // Production CDN URIs are based on each asset file hash\n  return {\n    uri: `https://d1wp6m56sqw74a.cloudfront.net/~assets/${encodeURIComponent(hash)}`,\n    hash,\n  };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const { protocol } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}