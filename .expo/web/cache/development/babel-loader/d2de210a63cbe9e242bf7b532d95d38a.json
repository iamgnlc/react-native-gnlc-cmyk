{"ast":null,"code":"var _jsxFileName = \"/Users/gnlc/Code/react-native-gnlc-cmyk/node_modules/expo-linear-gradient/build/NativeLinearGradient.web.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\n\nconst NativeLinearGradient = (_ref) => {\n  let {\n    colors,\n    locations,\n    startPoint,\n    endPoint\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"colors\", \"locations\", \"startPoint\", \"endPoint\"]);\n\n  const [layout, setLayout] = useState(null);\n  const [gradientColors, setGradientColors] = useState([]);\n  const [pseudoAngle, setPseudoAngle] = useState(0);\n  useEffect(() => {\n    const getControlPoints = () => {\n      let correctedStartPoint = [0, 0];\n\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [startPoint[0] != null ? startPoint[0] : 0.0, startPoint[1] != null ? startPoint[1] : 0.0];\n      }\n\n      let correctedEndPoint = [0.0, 1.0];\n\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [endPoint[0] != null ? endPoint[0] : 0.0, endPoint[1] != null ? endPoint[1] : 1.0];\n      }\n\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    const {\n      width = 1,\n      height = 1\n    } = layout || {};\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n    setPseudoAngle(90 + Math.atan2(py, px) * 180 / Math.PI);\n  }, [startPoint, endPoint]);\n  useEffect(() => {\n    const nextGradientColors = colors.map((color, index) => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index]));\n        const percentage = location * 100;\n        output += \" \".concat(percentage, \"%\");\n      }\n\n      return output;\n    });\n    setGradientColors(nextGradientColors);\n  }, [colors, locations]);\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = \"linear-gradient(\".concat(pseudoAngle, \"deg, \").concat(colorStyle, \")\");\n  return React.createElement(View, _extends({}, props, {\n    style: [props.style, {\n      backgroundImage\n    }],\n    onLayout: event => {\n      setLayout(event.nativeEvent.layout);\n\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    }\n  }));\n};\n\nexport default NativeLinearGradient;","map":{"version":3,"sources":["../src/NativeLinearGradient.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { LayoutRectangle, View } from 'react-native';\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\n\ntype Props = {\n  colors: number[];\n  locations?: number[] | null;\n  startPoint?: Point | null;\n  endPoint?: Point | null;\n  onLayout?: Function;\n} & React.ComponentProps<typeof View>;\n\ntype Point = [number, number];\n\nconst NativeLinearGradient: FunctionComponent<Props> = ({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}: Props) => {\n  const [layout, setLayout] = useState<LayoutRectangle | null>(null);\n  const [gradientColors, setGradientColors] = useState<string[]>([]);\n  const [pseudoAngle, setPseudoAngle] = useState<number>(0);\n\n  useEffect(() => {\n    const getControlPoints = (): Point[] => {\n      let correctedStartPoint: Point = [0, 0];\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [\n          startPoint[0] != null ? startPoint[0] : 0.0,\n          startPoint[1] != null ? startPoint[1] : 0.0,\n        ];\n      }\n      let correctedEndPoint: Point = [0.0, 1.0];\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [\n          endPoint[0] != null ? endPoint[0] : 0.0,\n          endPoint[1] != null ? endPoint[1] : 1.0,\n        ];\n      }\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    const { width = 1, height = 1 } = layout || {};\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n\n    setPseudoAngle(90 + (Math.atan2(py, px) * 180) / Math.PI);\n  }, [startPoint, endPoint]);\n\n  useEffect(() => {\n    const nextGradientColors = colors.map((color: number, index: number): string => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index]));\n        // Convert 0...1 to 0...100\n        const percentage = location * 100;\n        output += ` ${percentage}%`;\n      }\n      return output;\n    });\n\n    setGradientColors(nextGradientColors);\n  }, [colors, locations]);\n\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = `linear-gradient(${pseudoAngle}deg, ${colorStyle})`;\n  // TODO: Bacon: In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n  return (\n    <View\n      {...props}\n      style={[\n        props.style,\n        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n        { backgroundImage },\n      ]}\n      onLayout={event => {\n        setLayout(event.nativeEvent.layout);\n        if (props.onLayout) {\n          props.onLayout(event);\n        }\n      }}\n    />\n  );\n};\n\nexport default NativeLinearGradient;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}